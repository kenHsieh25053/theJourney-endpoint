type Query {
  """
  get posts/postComment depends on 'POST', 'POSTCOMMENT' type
  """
  posts(id: ID!, type: String!): Posts!
}

type Mutation {
  """
  create or update posts/postComment depends on 'POST', 'POSTCOMMENT' type
  """
  postAddorUpdate(id: ID, travelListId: ID!, text: String!, type: String!): PostPayload!
  """
  delete posts/postComment depends on 'POST', 'POSTCOMMENT' type
  """
  postDelete(id: ID!, type: String!): Payload!
}

type PostPayload {
  status: String!
  message: String
  post: Post!
}

type Post implements Node {
  id: ID!
  text: String!
  likes: Int!
  createdAt: String!
  updatedAt: String!
  userId: ID!
  travelListId: ID!
}

type Posts {
  status: String!
  message: String
  posts: [Post!]!
}

# type PostLikes {
#   status: String!
#   message: String
#   postlikes: [PostLike!]!
# }

# type PostLike implements Node {
#   id: ID!
#   likeList: JSON!
#   postId: ID!
# }