type Query {
  """
  login with email and password
  """
  login(email: String!, password: String!): LoginInfo!

  """
  get the user own profile
  """
  userProfile: UserProfilePayload!
}

type Mutation {
  """
  sign up with email and password
  """
  signup(email: String!, username: String!, password: String!): Payload!
  """
  update userprofile
  """
  userProfilePost(
    username: String
    email: String!
    profile: String
  ): UserProfilePayload!
  """
  delete user
  """
  userDelete: Payload
}

interface Node {
  id: ID!
}

type UserProfilePayload {
  status: String!
  message: String
  userProfile: User
}

type User implements Node {
  id: ID!
  username: String
  password: String!
  email: String!
  position: String
  countries: Int
  cities: Int
  headshot: String
  profile: String
  createdAt: String!
  updatedAt: String!
}

type Payload {
  status: String!
  message: String
}

type LoginInfo {
  status: String!
  message: String
  id_token: String
}
